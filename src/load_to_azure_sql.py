"""
load_to_azure_sql.py

Script to load the cleaned regional economic dataset into Azure SQL Database.
The script reads the final merged CSV, connects to Azure SQL using pyodbc,
creates the target table if it does not exist, and inserts all rows.

Author: Alex Vidal
Created: 2024-04-09
"""

import pandas as pd
import pyodbc
import os
from dotenv import load_dotenv

# === Load credentials from .env file ===
# Reads environment variables from the .env file (ignored in Git for security).
# This avoids hardcoding sensitive credentials in the script.
load_dotenv("../.env")  

# === Azure SQL connection parameters ===
# The connection parameters are stored in environment variables.
# These are loaded into Python variables for building the connection string.
server = os.getenv("AZURE_SQL_SERVER")        # Azure SQL server name
database = os.getenv("AZURE_SQL_DATABASE")    # Database name
username = os.getenv("AZURE_SQL_USERNAME")    # SQL user
password = os.getenv("AZURE_SQL_PASSWORD")    # SQL password
driver = '{ODBC Driver 17 for SQL Server}'    # ODBC driver required for Azure SQL

# === Build connection string ===
# Connection string in ODBC format, required by pyodbc to establish a connection.
conn_str = (
    f"DRIVER={driver};"
    f"SERVER={server};"
    f"DATABASE={database};"
    f"UID={username};"
    f"PWD={password}"
)

# === Load CSV dataset ===
# Reads the final merged CSV file generated by Spark into a pandas DataFrame.
# This file contains one row per voivodeship with socio-economic indicators.
csv_path = "../data/processed/regional_economic_data_2023_spark.csv"
df = pd.read_csv(csv_path)

# === Connect to Azure SQL ===
# Establishes a connection to Azure SQL Database and creates a cursor to run SQL commands.
conn = pyodbc.connect(conn_str)
cursor = conn.cursor()

# === Create table if it does not exist ===
# Ensures the target table is available. If not, creates it with the required schema.
# The table stores voivodeship (text) and numeric indicators (FLOAT).
cursor.execute("""
IF OBJECT_ID('regional_economic_data_2023', 'U') IS NULL
CREATE TABLE regional_economic_data_2023 (
    voivodeship NVARCHAR(100),
    gdp_per_capita_pln FLOAT,
    unemployment_rate FLOAT,
    average_gross_wage FLOAT,
    population_total FLOAT
)
""")
conn.commit()

# === Insert data into table ===
# Defines a parametrized INSERT query with placeholders (?)
# and executes it row by row from the DataFrame.
insert_sql = """
INSERT INTO regional_economic_data_2023 (
    voivodeship, gdp_per_capita_pln, unemployment_rate, average_gross_wage, population_total
) VALUES (?, ?, ?, ?, ?)
"""

for _, row in df.iterrows():
    cursor.execute(insert_sql, tuple(row))

# Commit all changes to the database after inserting the rows
conn.commit()

# === Close resources ===
# Closes the cursor and connection to release resources.
cursor.close()
conn.close()

# === Final message ===
# Prints a confirmation that the data load finished successfully.
print("Data successfully loaded into Azure SQL Database.")

